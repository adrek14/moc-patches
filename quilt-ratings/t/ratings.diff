From: adrek14 <xxxxxxxxxx@xxxxx.xxx>
Subject: [PATCH] t/ratings

This patch adds the read-only functionality of reading id3v2 POPM frame
rating tags and vorbis comment "rating:" keys.
Parsed ratings are presented in the interface.
For more details, see http://moc.daper.net/node/885

Signed-off-by: adrek14 <xxxxxxxxxx@xxxxx.xxx>

---
 decoder_plugins/aac/aac.c       |   25 +++++++++++
 decoder_plugins/flac/flac.c     |   30 +++++++++++++
 decoder_plugins/mp3/mp3.c       |   25 +++++++++++
 decoder_plugins/vorbis/vorbis.c |   35 +++++++++++++++
 interface_elements.c            |   38 ++++++++++++++++
 menu.c                          |   89 ++++++++++++++++++++++++++++++++------
 menu.h                          |    5 ++
 options.c                       |    1 +
 playlist.c                      |    3 +
 playlist.h                      |    1 +
 playlist_file.c                 |    1 +
 protocol.c                      |    8 ++++
 tags_cache.c                    |    9 +++-
 utf8.c                          |   24 ++++++++++-
 utf8.h                          |    2 +
 15 files changed, 279 insertions(+), 17 deletions(-)

diff --git a/decoder_plugins/aac/aac.c b/decoder_plugins/aac/aac.c
index e93bb22..6f09fcd 100644
--- a/decoder_plugins/aac/aac.c
+++ b/decoder_plugins/aac/aac.c
@@ -62,6 +62,8 @@ struct aac_data
 	int duration;
 };
 
+static int tag_rating_scale[] = { 0, 63, 127, 191, 254, 255 };
+
 static int buffer_length (const struct aac_data *data)
 {
 	return data->rbuf_len - data->rbuf_pos;
@@ -373,6 +375,28 @@ static char *get_tag (struct id3_tag *tag, const char *what)
 	return comm;
 }
 
+static int get_tag_rating (struct id3_tag *tag)
+{
+	struct id3_frame *frame;
+	int raw_rating;
+	int rating;
+
+	frame = id3_tag_findframe (tag, "POPM", 0);
+	if (frame && frame->nfields >= 2)
+		raw_rating = (int)id3_field_getint(&frame->fields[1]);
+	else
+		return -1;
+
+	if (raw_rating < 0 || raw_rating > 255)
+		return -1;
+
+	for (rating = 0; rating <= 5; ++rating)
+		if (raw_rating <= tag_rating_scale[rating])
+			return rating;
+
+	return -1;
+}
+
 /* Fill info structure with data from aac comments */
 static void aac_info (const char *file_name,
 		struct file_tags *info,
@@ -391,6 +415,7 @@ static void aac_info (const char *file_name,
 			info->artist = get_tag (tag, ID3_FRAME_ARTIST);
 			info->title = get_tag (tag, ID3_FRAME_TITLE);
 			info->album = get_tag (tag, ID3_FRAME_ALBUM);
+			info->rating = get_tag_rating (tag);
 			track = get_tag (tag, ID3_FRAME_TRACK);
 
 			if (track) {
diff --git a/decoder_plugins/flac/flac.c b/decoder_plugins/flac/flac.c
index 080add0..4f442c8 100644
--- a/decoder_plugins/flac/flac.c
+++ b/decoder_plugins/flac/flac.c
@@ -70,6 +70,9 @@ struct flac_data
 	struct decoder_error error;
 };
 
+/* First value should be checked for equality. */
+static double comment_rating_scale[] = { 0.5, 0.2, 0.4, 0.6, 0.8, 1.0 };
+
 /* Convert FLAC big-endian data into PCM little-endian. */
 static size_t pack_pcm_signed (FLAC__byte *data,
 		const FLAC__int32 * const input[], unsigned wide_samples,
@@ -422,6 +425,29 @@ static void flac_close (void *void_data)
 	free (data);
 }
 
+static int get_comment_rating (const char *rating_value)
+{
+	char *rating_value_end;
+	double raw_rating;
+	int rating;
+
+	raw_rating = strtod (rating_value, &rating_value_end);
+	if (*rating_value_end != 0)
+		return -1;
+
+	if (raw_rating < 0.0 || raw_rating > 1.0)
+		return -1;
+
+	if (raw_rating == comment_rating_scale[0])
+		return 0;
+
+	for (rating = 1; rating <= 5; ++rating)
+		if (raw_rating <= comment_rating_scale[rating])
+			return rating;
+
+	return -1;
+}
+
 static void fill_tag (FLAC__StreamMetadata_VorbisComment_Entry *comm,
 		struct file_tags *tags)
 {
@@ -458,6 +484,10 @@ static void fill_tag (FLAC__StreamMetadata_VorbisComment_Entry *comm,
 		tags->track = atoi (value);
 		free (value);
 	}
+	else if (!strncasecmp(name, "rating:", strlen("rating:"))) {
+		tags->rating = get_comment_rating (value);
+		free (value);
+	}
 	else
 		free (value);
 
diff --git a/decoder_plugins/mp3/mp3.c b/decoder_plugins/mp3/mp3.c
index 094f40b..ba20972 100644
--- a/decoder_plugins/mp3/mp3.c
+++ b/decoder_plugins/mp3/mp3.c
@@ -75,6 +75,8 @@ struct mp3_data
 	struct decoder_error error;
 };
 
+static int tag_rating_scale[] = { 0, 63, 127, 191, 254, 255 };
+
 /* Fill in the mad buffer, return number of bytes read, 0 on eof or error */
 static size_t fill_buff (struct mp3_data *data)
 {
@@ -184,6 +186,28 @@ static char *get_tag (struct id3_tag *tag, const char *what)
 	return comm;
 }
 
+static int get_tag_rating (struct id3_tag *tag)
+{
+	struct id3_frame *frame;
+	int raw_rating;
+	int rating;
+
+	frame = id3_tag_findframe (tag, "POPM", 0);
+	if (frame && frame->nfields >= 2)
+		raw_rating = (int)id3_field_getint(&frame->fields[1]);
+	else
+		return -1;
+
+	if (raw_rating < 0 || raw_rating > 255)
+		return -1;
+
+	for (rating = 0; rating <= 5; ++rating)
+		if (raw_rating <= tag_rating_scale[rating])
+			return rating;
+
+	return -1;
+}
+
 static int count_time_internal (struct mp3_data *data)
 {
 	struct xing xing;
@@ -466,6 +490,7 @@ static void mp3_info (const char *file_name, struct file_tags *info,
 			info->artist = get_tag (tag, ID3_FRAME_ARTIST);
 			info->title = get_tag (tag, ID3_FRAME_TITLE);
 			info->album = get_tag (tag, ID3_FRAME_ALBUM);
+			info->rating = get_tag_rating (tag);
 			track = get_tag (tag, ID3_FRAME_TRACK);
 
 			if (track) {
diff --git a/decoder_plugins/vorbis/vorbis.c b/decoder_plugins/vorbis/vorbis.c
index f8291ee..db5724e 100644
--- a/decoder_plugins/vorbis/vorbis.c
+++ b/decoder_plugins/vorbis/vorbis.c
@@ -52,6 +52,9 @@ static const int64_t time_scaler = 1;
 static const int64_t time_scaler = 1000;
 #endif
 
+/* First value should be checked for equality. */
+static double comment_rating_scale[] = { 0.5, 0.2, 0.4, 0.6, 0.8, 1.0 };
+
 struct vorbis_data
 {
 	struct io_stream *stream;
@@ -68,6 +71,34 @@ struct vorbis_data
 	struct file_tags *tags;
 };
 
+static int get_comment_rating (const char *rating_comment)
+{
+	char *rating_str;
+	char *rating_str_end;
+	double raw_rating;
+	int rating;
+
+	rating_str = strchr (rating_comment, '=') + 1;
+	if (rating_str == 0)
+		return -1;
+			
+	raw_rating = strtod (rating_str, &rating_str_end);
+	if (*rating_str_end != 0)
+		return -1;
+
+	if (raw_rating < 0.0 || raw_rating > 1.0)
+		return -1;
+
+	if (raw_rating == comment_rating_scale[0])
+		return 0;
+
+	for (rating = 1; rating <= 5; ++rating)
+		if (raw_rating <= comment_rating_scale[rating])
+			return rating;
+
+	return -1;
+}
+
 static void get_comment_tags (OggVorbis_File *vf, struct file_tags *info)
 {
 	int i;
@@ -98,6 +129,10 @@ static void get_comment_tags (OggVorbis_File *vf, struct file_tags *info)
 					"track=", strlen ("track=")))
 			info->track = atoi (comments->user_comments[i]
 					+ strlen ("track="));
+		else if (!strncasecmp(comments->user_comments[i],
+					"rating:", strlen ("rating:")) &&
+				info->rating <= 0)
+			info->rating = get_comment_rating(comments->user_comments[i]);
 	}
 }
 
diff --git a/interface_elements.c b/interface_elements.c
index 22d4356..4c96d61 100644
--- a/interface_elements.c
+++ b/interface_elements.c
@@ -802,6 +802,8 @@ static void side_menu_init (struct side_menu *m, const enum side_menu_type type,
 				options_get_int("ShowFormat"));
 		menu_set_show_time (m->menu.list.main,
 				strcasecmp(options_get_str("ShowTime"), "no"));
+		menu_set_show_rating (m->menu.list.main,
+				options_get_bool("ShowRating"));
 		menu_set_info_attr_normal (m->menu.list.main,
 				get_color(CLR_MENU_ITEM_INFO));
 		menu_set_info_attr_sel (m->menu.list.main,
@@ -1021,6 +1023,25 @@ static void main_win_destroy (struct main_win *w)
 		free (w->curr_file);
 }
 
+static void rating_to_str (char *rating_str, const int rating)
+{
+	const char empty_star[] = " ";
+	const char filled_star[] = { 0xe2, 0x98, 0x85, '\0' }; // unicode 0x2606
+	int star_num;
+	int space_num;
+
+	assert (rating >= -1 && rating <= 5);
+
+	star_num = (rating < 0 ? 0 : rating);
+	space_num = 5 - star_num;
+
+	rating_str[0] = '\0';
+	while (star_num--)
+		strcat (rating_str, filled_star);
+	while (space_num--)
+		strcat (rating_str, empty_star);
+}
+
 /* Make a title suitable to display in a menu from the title of a playlist item.
  * Returned memory is malloc()ed.
  * made_from tags - was the playlist title made from tags?
@@ -1077,6 +1098,13 @@ static int add_to_menu (struct menu *menu, const struct plist *plist,
 		sec_to_min (time_str, item->tags->time);
 		menu_item_set_time (added, time_str);
 	}
+ 
+ 	if (item->tags && item->tags->rating != -1) {
+		char rating_str[16];
+
+		rating_to_str (rating_str, item->tags->rating);
+ 		menu_item_set_rating (added, rating_str);
+ 	}
 
 	menu_item_set_attr_normal (added, get_color(CLR_MENU_ITEM_FILE));
 	menu_item_set_attr_sel (added, get_color(CLR_MENU_ITEM_FILE_SELECTED));
@@ -1111,6 +1139,7 @@ static void side_menu_clear (struct side_menu *m)
 	menu_set_show_format (m->menu.list.main, options_get_int("ShowFormat"));
 	menu_set_show_time (m->menu.list.main,
 			strcasecmp(options_get_str("ShowTime"), "no"));
+	menu_set_show_rating (m->menu.list.main, options_get_bool("ShowRating"));
 	menu_set_info_attr_normal (m->menu.list.main, get_color(CLR_MENU_ITEM_INFO));
 	menu_set_info_attr_sel (m->menu.list.main, get_color(CLR_MENU_ITEM_INFO_SELECTED));
 	menu_set_info_attr_marked (m->menu.list.main, get_color(CLR_MENU_ITEM_INFO_MARKED));
@@ -1432,6 +1461,15 @@ static void update_menu_item (struct menu_item *mi,
 	}
 	else
 		menu_item_set_time (mi, "");
+ 
+ 	if (item->tags && item->tags->rating != -1) {
+ 		char rating_str[16];
+ 
+ 		rating_to_str (rating_str, item->tags->rating);
+ 		menu_item_set_rating (mi, rating_str);
+ 	}
+ 	else
+ 		menu_item_set_rating (mi, "");
 
 	made_from_tags = (options_get_bool ("ReadTags") && item->title_tags);
 
diff --git a/menu.c b/menu.c
index c12621e..e2d3071 100644
--- a/menu.c
+++ b/menu.c
@@ -107,6 +107,20 @@ static void draw_item (const struct menu *menu, const struct menu_item *mi,
 		}
 	}
 
+	/* Rating - keep the "theme", but not selected nor bold.
+	   Some utf8 chars do not have bold versions. */
+	if (menu->show_rating) {
+		wmove (menu->win, pos, item_info_pos + 1);
+		if (mi == menu->marked)
+			wattrset (menu->win, mi->attr_marked);
+		else
+			wattrset (menu->win, mi->attr_normal);
+		wattroff (menu->win, A_BOLD);
+
+		xmvwadd_rating_str (menu->win, pos, item_info_pos + 1,
+				*mi->rating != 0 ? mi->rating : "     ");
+	}
+
 	/* Description. */
 	if (draw_selected && mi == menu->selected && mi == menu->marked)
 		wattrset (menu->win, menu->info_attr_sel_marked);
@@ -125,15 +139,35 @@ static void draw_item (const struct menu *menu, const struct menu_item *mi,
 		xwaddstr (menu->win, "]");
 	}
 
-	if (menu->show_time && menu->show_format
-			&& (*mi->time || *mi->format))
-		xwprintw (menu->win, "[%5s|%3s]",
-				mi->time ? mi->time : "	 ",
-				mi->format);
-	else if (menu->show_time && mi->time[0])
-		xwprintw (menu->win, "[%5s]", mi->time);
-	else if (menu->show_format && mi->format[0])
-		xwprintw (menu->win, "[%3s]", mi->format);
+	int show_details_num = 0;
+	show_details_num += (int)(menu->show_time != 0);
+	show_details_num += (int)(menu->show_format != 0);
+	show_details_num += (int)(menu->show_rating != 0);
+
+	bool show_details = (show_details_num > 0)
+			&& (*mi->rating != 0 || *mi->time || *mi->format);
+
+	if (show_details) {
+		int separators = show_details_num - 1;
+
+		xwprintw (menu->win, "[");
+
+		if (menu->show_rating) {
+			wmove (menu->win, pos, item_info_pos + 6); /* Already printed. */
+
+			if (separators--)
+				xwprintw (menu->win, "|");
+		}
+		if (menu->show_time) {
+			xwprintw (menu->win, "%5s", mi->time ? mi->time : "  ");
+			if (separators--)
+				xwprintw (menu->win, "|");
+		}
+		if (menu->show_format && *mi->format)
+			xwprintw (menu->win, "%3s", mi->format);
+
+		xwprintw (menu->win, "]");
+	}
 }
 
 void menu_draw (const struct menu *menu, const int active)
@@ -142,6 +176,7 @@ void menu_draw (const struct menu *menu, const int active)
 	int title_width;
 	int info_pos;
 	int number_space = 0;
+	int show_details_num = 0;
 
 	assert (menu != NULL);
 
@@ -157,16 +192,22 @@ void menu_draw (const struct menu *menu, const int active)
 	else
 		number_space = 0;
 
-	if (menu->show_time || menu->show_format) {
+	show_details_num += (int)(menu->show_time != 0);
+	show_details_num += (int)(menu->show_format != 0);
+	show_details_num += (int)(menu->show_rating != 0);
+	if (show_details_num > 0) {
+
 		title_width = menu->width - 2; /* -2 for brackets */
+
+		if (menu->show_rating)
+			title_width -= 5; /* 5 rating stars */
 		if (menu->show_time)
 			title_width -= 5; /* 00:00 */
 		if (menu->show_format)
 			title_width -= 3; /* MP3 */
-		if (menu->show_time && menu->show_format)
-			title_width--; /* for | */
-		info_pos = title_width;
-	}
+		title_width -= show_details_num - 1; /* for | */
+ 		info_pos = title_width;
+ 	}
 	else {
 		title_width = menu->width;
 		info_pos = title_width;
@@ -234,6 +275,7 @@ struct menu *menu_new (WINDOW *win, const int posx, const int posy,
 	menu->marked = NULL;
 	menu->show_time = 0;
 	menu->show_format = 0;
+	menu->show_rating = 0;
 	menu->info_attr_normal = A_NORMAL;
 	menu->info_attr_sel = A_NORMAL;
 	menu->info_attr_marked = A_NORMAL;
@@ -268,6 +310,7 @@ struct menu_item *menu_add (struct menu *menu, const char *title,
 
 	mi->time[0] = 0;
 	mi->format[0] = 0;
+	mi->rating[0] = 0;
 	mi->queue_pos = 0;
 
 	mi->next = NULL;
@@ -308,6 +351,7 @@ static struct menu_item *menu_add_from_item (struct menu *menu,
 
 	strncpy(new->time, mi->time, FILE_TIME_STR_SZ);
 	strncpy(new->format, mi->format, FILE_FORMAT_SZ);
+	strncpy(new->rating, mi->rating, FILE_RATING_SZ);
 
 	return new;
 }
@@ -562,6 +606,7 @@ struct menu *menu_filter_pattern (const struct menu *menu, const char *pattern)
 			menu->height);
 	menu_set_show_time (new, menu->show_time);
 	menu_set_show_format (new, menu->show_format);
+	menu_set_show_rating (new, menu->show_rating);
 	menu_set_info_attr_normal (new, menu->info_attr_normal);
 	menu_set_info_attr_sel (new, menu->info_attr_sel);
 	menu_set_info_attr_marked (new, menu->info_attr_marked);
@@ -626,6 +671,15 @@ void menu_item_set_format (struct menu_item *mi, const char *format)
 			== 0);
 }
 
+void menu_item_set_rating (struct menu_item *mi, const char *rating)
+{
+	assert (mi != NULL);
+
+	mi->rating[sizeof(mi->rating)-1] = 0;
+	strncpy (mi->rating, rating, sizeof(mi->rating));
+	assert (mi->rating[sizeof(mi->rating)-1] == 0);
+}
+
 void menu_item_set_queue_pos (struct menu_item *mi, const int pos)
 {
 	assert (mi != NULL);
@@ -647,6 +701,13 @@ void menu_set_show_format (struct menu *menu, const int t)
 	menu->show_format = t;
 }
 
+void menu_set_show_rating (struct menu *menu, const int t)
+{
+	assert (menu != NULL);
+
+	menu->show_rating = t;
+}
+
 void menu_set_info_attr_normal (struct menu *menu, const int attr)
 {
 	assert (menu != NULL);
diff --git a/menu.h b/menu.h
index 8efe425..8db96a5 100644
--- a/menu.h
+++ b/menu.h
@@ -34,6 +34,7 @@ enum menu_align
 
 #define FILE_TIME_STR_SZ        6
 #define FILE_FORMAT_SZ          4
+#define FILE_RATING_SZ          16
 
 struct menu_item
 {
@@ -54,6 +55,7 @@ struct menu_item
 	/* Additional information shown: */
 	char time[FILE_TIME_STR_SZ];		/* File time string */
 	char format[FILE_FORMAT_SZ];		/* File format */
+	char rating[FILE_RATING_SZ];		/* Rating */
 	int queue_pos;				/* Position in the queue */
 
 	struct menu_item *next;
@@ -80,6 +82,7 @@ struct menu
 	/* Flags for displaying information about the file. */
 	int show_time;
 	int show_format;
+	int show_rating;
 
 	int info_attr_normal;	/* attributes for information about the file */
 	int info_attr_sel;
@@ -110,6 +113,7 @@ void menu_item_set_attr_marked (struct menu_item *mi, const int attr);
 
 void menu_item_set_time (struct menu_item *mi, const char *time);
 void menu_item_set_format (struct menu_item *mi, const char *format);
+void menu_item_set_rating (struct menu_item *mi, const char *rating);
 void menu_item_set_queue_pos (struct menu_item *mi, const int pos);
 
 void menu_free (struct menu *menu);
@@ -126,6 +130,7 @@ void menu_unmark_item (struct menu *menu);
 struct menu *menu_filter_pattern (const struct menu *menu, const char *pattern);
 void menu_set_show_time (struct menu *menu, const int t);
 void menu_set_show_format (struct menu *menu, const int t);
+void menu_set_show_rating (struct menu *menu, const int t);
 void menu_set_info_attr_normal (struct menu *menu, const int attr);
 void menu_set_info_attr_sel (struct menu *menu, const int attr);
 void menu_set_info_attr_marked (struct menu *menu, const int attr);
diff --git a/options.c b/options.c
index b1f798d..2021f85 100644
--- a/options.c
+++ b/options.c
@@ -602,6 +602,7 @@ void options_init ()
 	add_bool ("ShowFormat", true);
 	add_symb ("ShowTime", "IfAvailable",
 	                 CHECK_SYMBOL(3), "yes", "no", "IfAvailable");
+	add_bool ("ShowRating", true);
 	add_bool ("ShowTimePercent", false);
 
 	add_list ("XTerms", "xterm:"
diff --git a/playlist.c b/playlist.c
index 9138db1..5504575 100644
--- a/playlist.c
+++ b/playlist.c
@@ -67,6 +67,7 @@ void tags_clear (struct file_tags *tags)
 	tags->album = NULL;
 	tags->track = -1;
 	tags->time = -1;
+	tags->rating = -1;
 }
 
 /* Copy the tags data from src to dst freeing old fields if necessary. */
@@ -86,6 +87,7 @@ void tags_copy (struct file_tags *dst, const struct file_tags *src)
 
 	dst->track = src->track;
 	dst->time = src->time;
+	dst->rating = src->rating;
 	dst->filled = src->filled;
 }
 
@@ -99,6 +101,7 @@ struct file_tags *tags_new ()
 	tags->album = NULL;
 	tags->track = -1;
 	tags->time = -1;
+	tags->rating = -1;
 	tags->filled = 0;
 
 	return tags;
diff --git a/playlist.h b/playlist.h
index 37f8500..ec3ca19 100644
--- a/playlist.h
+++ b/playlist.h
@@ -30,6 +30,7 @@ struct file_tags
 	char *album;
 	int track;
 	int time;
+	int rating;
 	int filled; /* Which tags are filled: TAGS_COMMENTS, TAGS_TIME. */
 };
 
diff --git a/playlist_file.c b/playlist_file.c
index f439821..ce6bcbf 100644
--- a/playlist_file.c
+++ b/playlist_file.c
@@ -355,6 +355,7 @@ static int plist_load_pls (struct plist *plist, const char *fname,
 					plist->items[last_added].tags->time = time;
 					plist->items[last_added].tags->filled |= TAGS_TIME;
 				}
+				plist->items[last_added].tags->rating = -1;
 			}
 		}
 
diff --git a/protocol.c b/protocol.c
index 1482eb0..3d343cd 100644
--- a/protocol.c
+++ b/protocol.c
@@ -283,6 +283,7 @@ void packet_buf_add_tags (struct packet_buf *b, const struct file_tags *tags)
 		packet_buf_add_str (b, tags->album ? tags->album : "");
 		packet_buf_add_int (b, tags->track);
 		packet_buf_add_int (b, tags->filled & TAGS_TIME ? tags->time : -1);
+		packet_buf_add_int (b, tags->rating);
 		packet_buf_add_int (b, tags->filled);
 	}
 	else {
@@ -293,6 +294,7 @@ void packet_buf_add_tags (struct packet_buf *b, const struct file_tags *tags)
 		packet_buf_add_str (b, ""); /* album */
 		packet_buf_add_int (b, -1); /* track */
 		packet_buf_add_int (b, -1); /* time */
+		packet_buf_add_int (b, -1); /* rating */
 		packet_buf_add_int (b, 0); /* filled */
 	}
 }
@@ -384,6 +386,12 @@ struct file_tags *recv_tags (int sock)
 		return NULL;
 	}
 
+	if (!get_int(sock, &tags->rating)) {
+		logit ("Error while receiving 'rating'");
+		tags_free (tags);
+		return NULL;
+	}
+
 	if (!get_int(sock, &tags->filled)) {
 		logit ("Error while receiving 'filled'");
 		tags_free (tags);
diff --git a/tags_cache.c b/tags_cache.c
index 72e0e9a..3a24a5d 100644
--- a/tags_cache.c
+++ b/tags_cache.c
@@ -65,7 +65,7 @@
  * temporarily set it to zero to disable cache activity during structural
  * changes which require multiple commits.
  */
-#define CACHE_DB_FORMAT_VERSION	1
+#define CACHE_DB_FORMAT_VERSION	2
 
 /* How frequently to flush the tags database to disk.  A value of zero
  * disables flushing. */
@@ -217,7 +217,8 @@ static char *cache_record_serialize (const struct cache_record *rec, int *len)
 		+ album_len
 		+ title_len
 		+ sizeof(rec->tags->track)
-		+ sizeof(rec->tags->time);
+		+ sizeof(rec->tags->time)
+		+ sizeof(rec->tags->rating);
 
 	buf = p = (char *)xmalloc (*len);
 
@@ -254,6 +255,9 @@ static char *cache_record_serialize (const struct cache_record *rec, int *len)
 	memcpy (p, &rec->tags->time, sizeof(rec->tags->time));
 	p += sizeof(rec->tags->time);
 
+	memcpy (p, &rec->tags->rating, sizeof(rec->tags->rating));
+	p += sizeof(rec->tags->rating);
+
 	return buf;
 }
 #endif
@@ -302,6 +306,7 @@ static int cache_record_deserialize (struct cache_record *rec,
 		extract_str (rec->tags->title);
 		extract_num (rec->tags->track);
 		extract_num (rec->tags->time);
+		extract_num (rec->tags->rating);
 
 		if (rec->tags->title)
 			rec->tags->filled |= TAGS_COMMENTS;
diff --git a/utf8.c b/utf8.c
index 246e359..a35cad9 100644
--- a/utf8.c
+++ b/utf8.c
@@ -279,6 +279,29 @@ int xmvwaddnstr (WINDOW *win, const int y, const int x, const char *str,
 	return res;
 }
 
+int xmvwadd_rating_str (WINDOW *win, const int y, const int x,
+		const char *rating_str)
+{
+	int res;
+
+	if (using_utf8)
+		res = mvwaddstr (win, y, x, rating_str);
+	else {
+		char buf[6];
+		int i;
+
+		strncpy(buf, rating_str + strlen(rating_str) - 5, 6);
+
+		for (i = 0; i <= 4; ++i)
+			if (buf[i] != ' ')
+				buf[i] = '*';
+
+		res = mvwaddstr (win, y, x, buf);
+	}
+
+	return res;
+}
+
 int xwprintw (WINDOW *win, const char *fmt, ...)
 {
 	va_list va;
@@ -349,7 +372,6 @@ void utf8_init ()
 	{
 		xterm_iconv_desc = iconv_open ("", "UTF-8");
 	}
-
 }
 
 void utf8_cleanup ()
diff --git a/utf8.h b/utf8.h
index 09282aa..fbdf538 100644
--- a/utf8.h
+++ b/utf8.h
@@ -28,6 +28,8 @@ int xwaddnstr (WINDOW *win, const char *str, const int n);
 int xmvwaddstr (WINDOW *win, const int y, const int x, const char *str);
 int xmvwaddnstr (WINDOW *win, const int y, const int x, const char *str,
 		const int n);
+int xmvwadd_rating_str (WINDOW *win, const int y, const int x,
+		const char *rating_str);
 #ifdef HAVE__ATTRIBUTE__
 int xwprintw (WINDOW *win, const char *fmt, ...)
 	__attribute__ ((format (printf, 2, 3)));
-- 
tg: (67f7d00..) t/ratings (depends on: master)
